#!/usr/bin/env python
import sys
import os
import argparse
# import subprocess
from pkg_resources import require
from pathlib import Path

import numpy as np
import nibabel as nib

from totalsegmentator.libs import setup_nnunet
from totalsegmentator.preview import generate_preview


def main():
    parser = argparse.ArgumentParser(description="Segment X classes in CT images.",
                                        epilog="Written by Jakob Wasserthal. Please reference TODO")

    parser.add_argument("-i", metavar="filepath", dest="input",
                        help="CT nifti image", 
                        type=lambda p: Path(p).absolute(), required=True)

    parser.add_argument("-o", metavar="directory", dest="output",
                        help="Output directory for segmentation masks", 
                        type=lambda p: Path(p).absolute(), required=True)

    parser.add_argument("--ml", action="store_true", help="Save one multilabel image for all classes",
                        default=False)

    parser.add_argument("-c", "--nr_cpus", type=int, help="Nr of CPUs to use", default=1)

    parser.add_argument("-f", "--fast", action="store_true", help="Run faster lower resolution model",
                        default=False)

    parser.add_argument("-t", "--nora_tag", type=str, help="tag in nora as mask. Pass nora project id as argument.",
                        default="None")

    parser.add_argument("-p", "--preview", action="store_true", help="Generate a png preview of segmentation",
                        default=False)

    parser.add_argument("-q", "--quiet", action="store_true", help="Print no intermediate outputs",
                        default=False)

    parser.add_argument("-v", "--verbose", action="store_true", help="Show more intermediate output",
                        default=False)

    # per default run with 5 folds; add optional fast option to run on only one fold
    # -> option "fast"

    # add super fast and less memory option: train model on 3mm -> for many usecases probably fine
    # -> option "very fast"
    # Make this the default? -> not for GPU, but maybe for CPU

    parser.add_argument('--version', action='version', version=require("TotalSegmentator")[0].version)

    args = parser.parse_args()

    quiet, verbose = args.quiet, args.verbose

    setup_nnunet()

    from totalsegmentator.nnunet import nnUNet_predict_image  # this has to be after setting new env vars
    # task_id = 224  # 17
    # task_id = 800
    trainer = "nnUNetTrainerV2_ep4000_nomirror"

    if args.fast:
        task_id = 256
        resample = 3.0
    else:
        raise ValueError("The non-fast option is not implemented yet")
        task_id = 251
        resample = 1.5

    folds = [0]  # None
    nnUNet_predict_image(args.input, args.output, task_id, model="3d_fullres", folds=folds,
                         trainer=trainer, tta=False, multilabel_image=args.ml, resample=resample,
                         nora_tag=args.nora_tag, preview=args.preview, nr_cpus=args.nr_cpus, 
                         quiet=quiet, verbose=verbose)

if __name__ == "__main__":
    main()
